
plugins {
	id 'org.springframework.boot' version '2.2.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'groovy'
	id 'idea'
	id 'com.avast.gradle.docker-compose' version '0.9.2'
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile ("org.springframework.boot:spring-boot-starter-data-jpa") {
		exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
	}
	compile "org.projectlombok:lombok:1.18.+"
	compile 'org.postgresql:postgresql'
	compile "org.mapstruct:mapstruct-processor:1.3.1.Final"
	compile "org.mapstruct:mapstruct-jdk8:1.3.1.Final"
	implementation 'org.hibernate:hibernate-java8:5.0.12.Final'
	compileOnly 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'

	runtime 'org.springframework.boot:spring-boot-devtools'

	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile "org.codehaus.groovy:groovy-all:2.4.11"
	testCompile "org.spockframework:spock-core:1.1-groovy-2.4"
	testCompile "org.spockframework:spock-spring:1.1-groovy-2.4"
	testCompile "org.mockito:mockito-core:3.1.0"
	testCompile "com.github.javafaker:javafaker:1.0.1"

	testCompileOnly 'org.projectlombok:lombok:1.18.12'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

compileJava {
	options.annotationProcessorPath = configurations.compile
}

sourceSets {
	testIntegration {
		groovy {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDirs += ['src/test-integration/groovy']
		}
		resources.srcDir file('src/test-integration/resources')
	}
}

idea {
	module {
		testSourceDirs += project.sourceSets.testIntegration.groovy.srcDirs
		testSourceDirs += project.sourceSets.testIntegration.resources.srcDirs
	}
}

configurations {
	testIntegrationCompile.extendsFrom testCompile
	testIntegrationRuntime.extendsFrom testRuntime
}

task testIntegration(type: Test) {
	testClassesDirs = sourceSets.testIntegration.output.classesDirs
	classpath = sourceSets.testIntegration.runtimeClasspath
	outputs.upToDateWhen { false }
}

dockerCompose {
	useComposeFiles = ['src/test-integration/resources/docker-compose.yml']
	stopContainers = false
	isRequiredBy testIntegration
}

testIntegration.doFirst {
	dockerCompose.exposeAsSystemProperties(testIntegration)
}
